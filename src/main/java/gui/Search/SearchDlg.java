/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.Search;

import beans.Account;
import beans.Article;
import beans.CashFlow;
import beans.DocumentPage;
import beans.Payment;
import beans.PaymentPosition;
import bl.AusgabenBl;
import gui.document.AddEditDocumentDlg;
import gui.main.CashFlowCellRenderer;
import gui.main.CashFlowTableModel;
import gui.payment.AddEditPaymentDlg;
import java.math.BigDecimal;
import java.sql.Date;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;

/**
 *
 * @author Bernhard
 */
public class SearchDlg extends javax.swing.JDialog {

    private AusgabenBl bl = AusgabenBl.getInstance();
    private ArrayList<CashFlow> data = new ArrayList<>();
    private CashFlowTableModel model = new CashFlowTableModel(data);

    /**
     * Creates new form SearchDlg
     */
    public SearchDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        tbPayments.setModel(model);
        for (int x = 0; x < tbPayments.getColumnCount(); ++x) {
            TableColumn col = tbPayments.getColumnModel().getColumn(x);
            col.setCellRenderer(new CashFlowCellRenderer());
        }
//        tbPayments.packAll();
//        tbPayments.updateUI();

        cbAccounts.removeAllItems();
        for (Account acc : bl.getAccounts()) {
            cbAccounts.addItem(acc);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btTime = new javax.swing.ButtonGroup();
        btAmount = new javax.swing.ButtonGroup();
        popup = new javax.swing.JPopupMenu();
        miIC = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        tfAmountto = new javax.swing.JTextField();
        cbPayee = new javax.swing.JCheckBox();
        tfPayee = new javax.swing.JTextField();
        cbAccount = new javax.swing.JCheckBox();
        cbAccounts = new javax.swing.JComboBox();
        cbTime = new javax.swing.JCheckBox();
        rbAtTime = new javax.swing.JRadioButton();
        rbFromTime = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        cbAmount = new javax.swing.JCheckBox();
        rbAmountExact = new javax.swing.JRadioButton();
        tfExactAmount = new javax.swing.JTextField();
        rbAmountFrom = new javax.swing.JRadioButton();
        tfAmountFrom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbWithCopy = new javax.swing.JCheckBox();
        cbWithoutCopy = new javax.swing.JCheckBox();
        cbIn = new javax.swing.JCheckBox();
        cbOut = new javax.swing.JCheckBox();
        dpAtDate = new org.jdesktop.swingx.JXDatePicker();
        dpFromDate = new org.jdesktop.swingx.JXDatePicker();
        dpToDate = new org.jdesktop.swingx.JXDatePicker();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbPayments = new javax.swing.JTable();

        miIC.setText("Rechnungskopie anzeigen");
        miIC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miIConShowInvvoiceCopy(evt);
            }
        });
        popup.add(miIC);

        jMenuItem2.setText("Bearbeiten");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2onEdit(evt);
            }
        });
        popup.add(jMenuItem2);

        jMenuItem3.setText("Löschen");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3onDelete(evt);
            }
        });
        popup.add(jMenuItem3);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Suchkriterien"));

        tfAmountto.setEnabled(false);

        cbPayee.setText("Sender/Empfänger:");
        cbPayee.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                oncbPayeeStateChange(evt);
            }
        });

        tfPayee.setEnabled(false);

        cbAccount.setText("Konto:");
        cbAccount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cbAccountStateChanged(evt);
            }
        });

        cbAccounts.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbAccounts.setEnabled(false);

        cbTime.setText("Zeit:");
        cbTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cbTimeStateChanged(evt);
            }
        });

        btTime.add(rbAtTime);
        rbAtTime.setText("Am: ");
        rbAtTime.setEnabled(false);
        rbAtTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbAtTimeStateChanged(evt);
            }
        });

        btTime.add(rbFromTime);
        rbFromTime.setText("Von: ");
        rbFromTime.setEnabled(false);
        rbFromTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbFromTimeStateChanged(evt);
            }
        });

        jLabel1.setText("bis ");

        cbAmount.setText("Gesamtbetrag:");
        cbAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cbAmountStateChanged(evt);
            }
        });

        btAmount.add(rbAmountExact);
        rbAmountExact.setText("Geanu: ");
        rbAmountExact.setToolTipText("");
        rbAmountExact.setEnabled(false);
        rbAmountExact.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbAmountExactStateChanged(evt);
            }
        });

        tfExactAmount.setEnabled(false);

        btAmount.add(rbAmountFrom);
        rbAmountFrom.setText("Von: ");
        rbAmountFrom.setEnabled(false);
        rbAmountFrom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbAmountFromStateChanged(evt);
            }
        });

        tfAmountFrom.setEnabled(false);

        jLabel2.setText("bis ");

        cbWithCopy.setText("Mit Rechnungskopie");

        cbWithoutCopy.setText("Ohne Rechnungskopie");

        cbIn.setText("Einnahme");

        cbOut.setText("Ausgabe");
        cbOut.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cbPayee)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPayee))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbAccount)
                            .addComponent(cbTime))
                        .addGap(63, 63, 63)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbAccounts, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbFromTime)
                                    .addComponent(rbAtTime))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dpAtDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dpFromDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(19, 19, 19)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dpToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cbWithCopy)
                                .addGap(24, 24, 24)
                                .addComponent(cbWithoutCopy))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cbIn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbOut))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cbAmount)
                                .addGap(24, 24, 24)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(rbAmountFrom)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfAmountFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(rbAmountExact)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfExactAmount)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfAmountto, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 141, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbPayee)
                    .addComponent(tfPayee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAccount)
                    .addComponent(cbAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTime)
                    .addComponent(rbAtTime)
                    .addComponent(dpAtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbFromTime)
                    .addComponent(jLabel1)
                    .addComponent(dpFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dpToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAmount)
                    .addComponent(rbAmountExact)
                    .addComponent(tfExactAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbAmountFrom)
                    .addComponent(tfAmountFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(tfAmountto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbWithCopy)
                    .addComponent(cbWithoutCopy))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbIn)
                    .addComponent(cbOut))
                .addGap(25, 25, 25))
        );

        jButton1.setText("Suchen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSearch(evt);
            }
        });

        tbPayments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbPayments);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(231, 231, 231)
                                .addComponent(jButton1)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void oncbPayeeStateChange(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_oncbPayeeStateChange
        tfPayee.setEnabled(cbPayee.isSelected());
        if (!cbPayee.isSelected()) {
            tfPayee.setEnabled(false);
            tfPayee.setText("");
        }
    }//GEN-LAST:event_oncbPayeeStateChange

    private void cbAccountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cbAccountStateChanged
        cbAccounts.setEnabled(cbAccount.isSelected());
    }//GEN-LAST:event_cbAccountStateChanged

    private void cbTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cbTimeStateChanged
        rbAtTime.setEnabled(cbTime.isSelected());
        rbFromTime.setEnabled(cbTime.isSelected());
        if (!cbTime.isSelected()) {
            dpFromDate.setEnabled(false);
            dpToDate.setEnabled(false);
            dpAtDate.setEnabled(false);
            dpFromDate.setDate(null);
            dpToDate.setDate(null);
            dpAtDate.setDate(null);
        }
    }//GEN-LAST:event_cbTimeStateChanged

    private void rbAtTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbAtTimeStateChanged
        dpAtDate.setEnabled(rbAtTime.isSelected());
        if (!rbAtTime.isSelected()) {
            dpAtDate.setDate(null);

        }
    }//GEN-LAST:event_rbAtTimeStateChanged

    private void rbFromTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbFromTimeStateChanged
        dpFromDate.setEnabled(rbFromTime.isSelected());
        dpToDate.setEnabled(rbFromTime.isSelected());
        if (!rbFromTime.isSelected()) {
            dpFromDate.setDate(null);
            dpToDate.setDate(null);
        }
    }//GEN-LAST:event_rbFromTimeStateChanged

    private void rbAmountExactStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbAmountExactStateChanged
        tfExactAmount.setEnabled(rbAmountExact.isSelected());
        if (!rbAmountExact.isSelected()) {
            tfExactAmount.setText(null);
        }
    }//GEN-LAST:event_rbAmountExactStateChanged

    private void rbAmountFromStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbAmountFromStateChanged
        tfAmountFrom.setEnabled(rbAmountFrom.isSelected());
        tfAmountto.setEnabled(rbAmountFrom.isSelected());
        if (!rbAmountFrom.isSelected()) {
            tfAmountFrom.setText("");
            tfAmountto.setText("");
        }
    }//GEN-LAST:event_rbAmountFromStateChanged

    private void cbAmountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cbAmountStateChanged
        rbAmountExact.setEnabled(cbAmount.isSelected());
        rbAmountFrom.setEnabled(cbAmount.isSelected());
        if (!cbAmount.isSelected()) {
            tfAmountFrom.setEnabled(false);
            tfAmountto.setEnabled(false);
            tfExactAmount.setEnabled(false);
            tfAmountFrom.setText("");
            tfAmountto.setText("");
            tfExactAmount.setText(null);
        }
    }//GEN-LAST:event_cbAmountStateChanged

    private void onSearch(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSearch
        String payee = null;
        boolean withCopy = false;
        boolean withoutCopy = false;
        Account account = null;
        BigDecimal exactAmount = null;
        BigDecimal fromAmount = null;
        BigDecimal toAmount = null;
        Date exactDate = null;
        Date fromDate = null;
        Date toDate = null;
        int type = 0;
        String error = "";
        if (cbPayee.isSelected()) {
            String payeeString = tfPayee.getText();
            payee = payeeString;
            if (payee == null) {
                error += "Sender/Empfänger nicht vorhanden!\n";
            }
        }

        if (cbWithCopy.isSelected()) {
            withCopy = true;
        }

        if (cbWithoutCopy.isSelected()) {
            withoutCopy = true;
        }

        if (cbAccount.isSelected()) {
            account = (Account) cbAccounts.getSelectedItem();
        }

        if (cbAmount.isSelected()) {
            if (rbAmountExact.isSelected()) {
                String exactAmountStr = tfExactAmount.getText();
                exactAmountStr = exactAmountStr.replaceAll(",", ".");
                try {
                    exactAmount = new BigDecimal(exactAmountStr);
                } catch (Exception e) {
                    exactAmount = null;
                    error += "Exakter Wert ungültig!\n";
                }
            } else if (rbAmountFrom.isSelected()) {
                String fromAmountStr = tfAmountFrom.getText();
                String toAmountStr = tfAmountto.getText();
                fromAmountStr = fromAmountStr.replaceAll(",", ".");
                toAmountStr = toAmountStr.replaceAll(",", ".");
                try {
                    fromAmount = new BigDecimal(fromAmountStr);
                    toAmount = new BigDecimal(toAmountStr);
                } catch (Exception e) {
                    fromAmount = null;
                    toAmount = null;
                    error += "Von/Bis Werte ungültig\n";
                }
            }
        }
        if (cbIn.isSelected() && cbOut.isSelected()) {
            type = 0;
        } else if (cbIn.isSelected()) {
            type = 1;
        } else if (cbOut.isSelected()) {
            type = -1;
        }
        if (cbTime.isSelected()) {
            if (rbAtTime.isSelected()) {
                java.util.Date date = dpAtDate.getDate();
                if (date != null) {
                    exactDate = new Date(date.getTime());
                } else {
                    error += "Datum ungültig! \n";
                }
            } else if (rbFromTime.isSelected()) {
                java.util.Date fromDateRaw = dpFromDate.getDate();
                java.util.Date toDateRaw = dpToDate.getDate();
                if (fromDateRaw != null && toDateRaw != null) {
                    fromDate = new Date(fromDateRaw.getTime());
                    toDate = new Date(toDateRaw.getTime());
                } else {
                    error += "Datum ungültig! \n";
                }
            }
        }

        if (error.length() == 0) {
            data.clear();
            data.addAll(bl.getPayments(payee, account, exactAmount, fromAmount, toAmount,
                    exactDate, fromDate, toDate,
                    withCopy, withoutCopy, type));
            tbPayments.setModel(model);
            //tbPayments.packAll();
            tbPayments.updateUI();
        } else {
            JOptionPane.showMessageDialog(this, error, "Fehler!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_onSearch

    private void miIConShowInvvoiceCopy(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miIConShowInvvoiceCopy
        int row = tbPayments.getSelectedRow();
        if (row >= 0) {
            CashFlow sel = data.get(row);
            if (sel instanceof Payment) {
                Payment payment = (Payment) sel;
                AddEditDocumentDlg icdlg = new AddEditDocumentDlg(null, true, true, payment.getInvoiceCopy(), true);
                icdlg.setVisible(true);
            }
        }
    }//GEN-LAST:event_miIConShowInvvoiceCopy

    private void jMenuItem2onEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2onEdit
        int row = tbPayments.getSelectedRow();
        if (row >= 0) {
            CashFlow sel = data.get(row);
            Payment payment = (Payment) sel;
            AddEditPaymentDlg aepdlg = new AddEditPaymentDlg(null, true, payment, false);
            aepdlg.setVisible(true);
            if (aepdlg.isOk()) {
                //delete old paymentpositions and create new ones
                payment = aepdlg.getPayment();
                bl.deleteAllPaymentPositions(payment);
                System.out.println(payment.getPaymentPositions());
                for (PaymentPosition pp : payment.getPaymentPositions()) {
                    String articleName = pp.getArticle().getName();
                    BigDecimal price = pp.getArticle().getPrice();
                    Article article = bl.getArticle(articleName, price);
                    pp.setArticle(article);
                    if (pp.getPayment() == null) {
                        pp.setPayment(payment);
                    }
                    bl.addObj(pp);
                }

                //delete old invoicecopy and create new one
                if (payment.getInvoiceCopy() != null) {
                    if (!payment.getInvoiceCopy().getDocumentPages().isEmpty()) {
                        bl.deleteDocumentPages(payment.getInvoiceCopy());
                        if (payment.getInvoiceCopy().getDocumentID() == 0) {
                            bl.addObj(payment.getInvoiceCopy());
                        }
                        for (DocumentPage dp : payment.getInvoiceCopy().getDocumentPages()) {
                            dp.setDocument(payment.getInvoiceCopy());
                            bl.addObj(dp);
                        }

                    } else {
                        //delete ic
                        bl.removeObj(payment.getInvoiceCopy());
                        payment.setInvoiceCopy(null);
                    }
                }
                bl.updateObj(payment);

            }

        }
        tbPayments.setModel(model);
        tbPayments.updateUI();


    }//GEN-LAST:event_jMenuItem2onEdit

    private void jMenuItem3onDelete(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3onDelete
//        int row = tbCashFlow.getSelectedRow();
//        if (row >= 0) {
//            CashFlow selected = cashFlow.get(row);
//            if (selected instanceof Transfer) {
//                bl.removeObj(selected);
//
//            } else if (selected instanceof Payment) {
//                Payment payment = (Payment) selected;
//                //delete invoicecopy
//                if (payment.getInvoiceCopy() != null) {
//                    //delete pages
//                    for (DocumentPage dp : payment.getInvoiceCopy().getDocumentPages()) {
//                        bl.removeObj(dp);
//                    }
//
//                }
//                //delete paymentpostions
//                for (PaymentPosition pp : payment.getPaymentPositions()) {
//                    bl.removeObj(pp);
//                }
//                //delete payment itself
//                bl.removeObj(payment);
//                if (payment.getInvoiceCopy() != null) {
//                    bl.removeObj(payment.getInvoiceCopy());
//                }
//            }
//
//            cashFlow.remove(row);
//            updateTable();
//            updateAccountBalances();
//        }
    }//GEN-LAST:event_jMenuItem3onDelete

    private void onMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onMouseClicked
        if (evt.getButton() == 3) {
            int row = tbPayments.getSelectedRow();
            if (row >= 0) {
                CashFlow selected = data.get(row);
                popup.show(tbPayments, evt.getX(), evt.getY());
                if (selected instanceof Payment) {
                    Payment p = (Payment) selected;
                    miIC.setEnabled((p.getInvoiceCopy() != null));
                } else {
                    miIC.setEnabled(false);
                }

            }
        }
    }//GEN-LAST:event_onMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SearchDlg dialog = new SearchDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btAmount;
    private javax.swing.ButtonGroup btTime;
    private javax.swing.JCheckBox cbAccount;
    private javax.swing.JComboBox cbAccounts;
    private javax.swing.JCheckBox cbAmount;
    private javax.swing.JCheckBox cbIn;
    private javax.swing.JCheckBox cbOut;
    private javax.swing.JCheckBox cbPayee;
    private javax.swing.JCheckBox cbTime;
    private javax.swing.JCheckBox cbWithCopy;
    private javax.swing.JCheckBox cbWithoutCopy;
    private org.jdesktop.swingx.JXDatePicker dpAtDate;
    private org.jdesktop.swingx.JXDatePicker dpFromDate;
    private org.jdesktop.swingx.JXDatePicker dpToDate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem miIC;
    private javax.swing.JPopupMenu popup;
    private javax.swing.JRadioButton rbAmountExact;
    private javax.swing.JRadioButton rbAmountFrom;
    private javax.swing.JRadioButton rbAtTime;
    private javax.swing.JRadioButton rbFromTime;
    private javax.swing.JTable tbPayments;
    private javax.swing.JTextField tfAmountFrom;
    private javax.swing.JTextField tfAmountto;
    private javax.swing.JTextField tfExactAmount;
    private javax.swing.JTextField tfPayee;
    // End of variables declaration//GEN-END:variables
}
