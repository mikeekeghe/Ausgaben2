/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.document;

import beans.Document;
import beans.DocumentPage;
import beans.InvoiceCopy;
import beans.Record;
import bl.AusgabenBl;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import utilities.PDFUtilities;
import utilities.PictureUtilities;
import utilities.ScannerUtilities;

/**
 *
 * @author Bernhard
 */
public class AddEditDocumentDlg extends javax.swing.JDialog {

    /**
     * Creates new form AddEditDocumentDlg
     */
    private ArrayList<DocumentPage> pages = new ArrayList<>();
    private int currentPage = 1;
    private AusgabenBl bl = AusgabenBl.getInstance();
    private boolean ok;
    private Document ic = new Document();
    private boolean invoiceCopy = false;

    public AddEditDocumentDlg(java.awt.Frame parent, boolean modal, boolean viewMode, Document ic, boolean invoiceCopy) {
        super(parent, modal);
        initComponents();
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(30);
        this.invoiceCopy = invoiceCopy;

        if (ic != null) {
            pages.clear();
            pages.addAll(ic.getDocumentPages());
            update(1);
        }

        if(viewMode){
            update(1);
            this.setJMenuBar(null);
            jPanel1.remove(jButton1);
            jPanel1.remove(jButton2);
        }
        else if (viewMode && ic != null) {
            pages.clear();
            pages.addAll(ic.getDocumentPages());
            update(1);
            this.setJMenuBar(null);
            jPanel1.remove(jButton1);
            jPanel1.remove(jButton2);
        }
       

        if (invoiceCopy) {
            remove(pnData);
            pack();
        } else {
            if (ic != null) {
                Record rec = (Record) ic;
                tfTitle.setText(rec.getTitle());
                taDescription.setText(rec.getDescription());

                if (viewMode) {
                    tfTitle.setEditable(false);
                    taDescription.setEditable(false);
                } else {
                    tfTitle.setEditable(true);
                    taDescription.setEditable(true);
                }
            }
        }

        setSize(1000, 850);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        pictureLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btBackward = new javax.swing.JButton();
        lbPage = new javax.swing.JLabel();
        btForward = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        pnData = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pictureLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jScrollPane1.setViewportView(pictureLabel);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        btBackward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/1395771983_Previous.png"))); // NOI18N
        btBackward.setEnabled(false);
        btBackward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onBackward(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(btBackward, gridBagConstraints);
        jPanel1.add(lbPage, new java.awt.GridBagConstraints());

        btForward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/1395772046_Next.png"))); // NOI18N
        btForward.setEnabled(false);
        btForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onForward(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(btForward, gridBagConstraints);

        jButton1.setText("Speichern");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSave(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(jButton1, gridBagConstraints);

        jButton2.setText("Abbrechen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancel(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(jButton2, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pnData.setBorder(javax.swing.BorderFactory.createTitledBorder("Daten"));

        jLabel1.setText("Bezeichnung:");

        jLabel2.setText("Beschreibung:");

        taDescription.setColumns(20);
        taDescription.setRows(5);
        jScrollPane2.setViewportView(taDescription);

        javax.swing.GroupLayout pnDataLayout = new javax.swing.GroupLayout(pnData);
        pnData.setLayout(pnDataLayout);
        pnDataLayout.setHorizontalGroup(
            pnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDataLayout.createSequentialGroup()
                .addGroup(pnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 739, Short.MAX_VALUE)
                    .addComponent(tfTitle))
                .addContainerGap())
        );
        pnDataLayout.setVerticalGroup(
            pnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDataLayout.createSequentialGroup()
                .addGroup(pnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnDataLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel2))))
        );

        getContentPane().add(pnData, java.awt.BorderLayout.NORTH);

        jMenu1.setText("Hinzuf√ºgen");

        jMenuItem1.setText("File");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddFile(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenu3.setText("PDF");

        jMenuItem2.setText("Ganzes PDF");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddWholePDF(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setText("Teile eines PDF");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddPartPDF(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenu1.add(jMenu3);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Zwischenablage");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddPictureFromClipboard(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setText("Scanner");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onScanImage(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Bearbeiten");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onClicked(evt);
            }
        });

        jMenuItem4.setText("Akutelle Seite l√∂schen");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDeleteCurrentPage(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onAddFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddFile
        JFileChooser jfc = new JFileChooser("C:\\Users\\Bernhard\\Pictures");
        jfc.setFileFilter(new FileNameExtensionFilter("Bilder", "jpg", "jpeg", "png"));
        jfc.showOpenDialog(this);
        File selected = jfc.getSelectedFile();
        if (selected != null) {
            DocumentPage dp = new DocumentPage(selected, pages.size() + 1);
            pages.add(dp);
            update(currentPage);
        }
    }//GEN-LAST:event_onAddFile

    private void onBackward(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onBackward
        update(currentPage - 1);
    }//GEN-LAST:event_onBackward

    private void onForward(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onForward
        update(currentPage + 1);
    }//GEN-LAST:event_onForward

    private void onSave(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSave
        if (!invoiceCopy) {
            String title = tfTitle.getText();
            if (title.length() > 0) {
                ic.setDocumentPages(pages);
                ok = true;
                setVisible(false);
            } else {
                JOptionPane.showMessageDialog(null, "Bitte einen Titel eingeben!", "Fehler!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            ic.setCategory(bl.getRootBillCategory());
            ic.setDocumentPages(pages);
            ok = true;
            setVisible(false);
        }
    }//GEN-LAST:event_onSave

    private void onCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCancel
        ok = false;
        setVisible(false);
    }//GEN-LAST:event_onCancel

    private void onAddWholePDF(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddWholePDF
        JFileChooser jfc = new JFileChooser("C:\\Users\\Bernhard");
        jfc.setFileFilter(new FileNameExtensionFilter("PDF", "pdf"));
        jfc.showOpenDialog(this);
        File selected = jfc.getSelectedFile();
        if (selected != null) {
            try {
                ArrayList<BufferedImage> images = PDFUtilities.extractPagesAsImage(selected);
                int startIndex = pages.size();
                if (startIndex == 0) {
                    startIndex++;
                }
                for (BufferedImage image : images) {
                    DocumentPage dp = new DocumentPage(image, startIndex++);
                    pages.add(dp);
                }
            } catch (Exception ex) {
                Logger.getLogger(AddEditDocumentDlg.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        update(currentPage);
    }//GEN-LAST:event_onAddWholePDF

    private void onAddPartPDF(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddPartPDF
        JFileChooser jfc = new JFileChooser("C:\\Users\\Bernhard");
        jfc.setFileFilter(new FileNameExtensionFilter("PDF", "pdf"));
        jfc.showOpenDialog(this);
        File selected = jfc.getSelectedFile();
        if (selected != null) {
            String input = JOptionPane.showInputDialog(this, "Bitte die gew√ºnschten Seite eingeben: \n");
            try {
                int pageIndex = Integer.parseInt(input);
                BufferedImage page = PDFUtilities.extractSingleImage(selected, pageIndex);
                DocumentPage dp = new DocumentPage(page, pages.size() + 1);
                pages.add(dp);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Keine g√ºltige Zahl!", "Fehler", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Keine g√ºltige Seitennummer!", "Fehler", JOptionPane.ERROR_MESSAGE);
            }
        }

        update(currentPage);


    }//GEN-LAST:event_onAddPartPDF

    private void onDeleteCurrentPage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDeleteCurrentPage
        if (!pages.isEmpty()) {
            int index = 0;
            for (int i = 0; i < pages.size(); i++) {
                DocumentPage dp = pages.get(i);
                if (dp.getPageIndex() == currentPage) {
                    index = i;
                }
            }
            //calc new pageindexes
            for (DocumentPage dp : pages) {
                if (dp.getPageIndex() > currentPage) {
                    dp.setPageIndex(dp.getPageIndex() - 1);
                }
            }
            pages.remove(index);
            if (currentPage != 1) {
                currentPage--;
            }

            update(currentPage);
        }
    }//GEN-LAST:event_onDeleteCurrentPage

    private void onClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onClicked

    }//GEN-LAST:event_onClicked

    private void onAddPictureFromClipboard(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddPictureFromClipboard
        BufferedImage image = PictureUtilities.getImageFromClipboard();
        if (image != null) {
            DocumentPage dp = new DocumentPage(image, pages.size() + 1);
            pages.add(dp);
            update(currentPage);
        } else {
            JOptionPane.showMessageDialog(this, "Inhalt der Zwischenablage ist kein Bild!", "Fehler", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_onAddPictureFromClipboard

    private void onScanImage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onScanImage
        try {
            BufferedImage image = ScannerUtilities.getImage();
            if (image != null) {
                DocumentPage dp = new DocumentPage(image, pages.size() + 1);
                pages.add(dp);
                update(currentPage);
            }
        } catch (Exception ex) {
            Logger.getLogger(AddEditDocumentDlg.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_onScanImage

    private void update(int pageIndex) {
        DocumentPage selected = null;
        for (DocumentPage dp : pages) {
            if (dp.getPageIndex() == pageIndex) {
                selected = dp;
            }
        }

        if (selected != null) {
            pictureLabel.setIcon(new ImageIcon(selected.getPage()));
            lbPage.setText("Seite " + pageIndex + " von " + pages.size());
            currentPage = pageIndex;

            int size = pages.size();
            if (pages.size() == 1) {
                btBackward.setEnabled(false);
                btForward.setEnabled(false);
            } else if (currentPage == 1 && size > 0) {
                //first page
                btBackward.setEnabled(false);
                btForward.setEnabled(true);
            } else if ((currentPage) == size && size > 1) {
                //last page
                btBackward.setEnabled(true);
                btForward.setEnabled(false);
            } else {
                btBackward.setEnabled(true);
                btForward.setEnabled(true);
            }
        }

        if (pages.isEmpty()) {
            pictureLabel.setIcon(null);
            lbPage.setText("");
            currentPage = 1;
        }

    }

    public boolean isOk() {
        return ok;
    }

    public InvoiceCopy getInvoiceCopy() {
        InvoiceCopy copy = new InvoiceCopy();
        copy.setDocumentID(ic.getDocumentID());
        copy.setCategory(ic.getCategory());
        copy.setDocumentPages(ic.getDocumentPages());

        return copy;
    }

    public Record getRecord() {
        Record record = new Record();
        record.setTitle(tfTitle.getText());
        record.setDescription(taDescription.getText());
        record.setDocumentID(ic.getDocumentID());
        record.setDocumentPages(ic.getDocumentPages());

        return record;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddEditDocumentDlg.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddEditDocumentDlg.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddEditDocumentDlg.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddEditDocumentDlg.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddEditDocumentDlg dialog = new AddEditDocumentDlg(new javax.swing.JFrame(), true, false, null, false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBackward;
    private javax.swing.JButton btForward;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbPage;
    private javax.swing.JLabel pictureLabel;
    private javax.swing.JPanel pnData;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables
}
