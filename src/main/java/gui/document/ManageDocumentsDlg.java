/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.document;

import beans.Category;
import enums.CategoryType;
import beans.DocumentPage;
import beans.Record;
import bl.AusgabenBl;
import gui.category.CategoryTreeModel;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.tree.TreePath;

/**
 *
 * @author bwaidach
 */
public class ManageDocumentsDlg extends javax.swing.JDialog {

    private AusgabenBl bl = AusgabenBl.getInstance();
    private CategoryTreeModel ctm = new CategoryTreeModel(bl.getDocumentCategories());
    private Category selected;
    private ArrayList<Record> records = new ArrayList<>();
    private DefaultListModel dlm = new DefaultListModel();

    /**
     * Creates new form ManageDocumentsDlg
     *
     * @param parent
     * @param modal
     */
    public ManageDocumentsDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        trRecord.setModel(ctm);
        trRecord.updateUI();
        setSize(1000, 600);
        spRecords.setDividerLocation(0.9f);
        jlRecord.setModel(dlm);
        setLocationRelativeTo(null);
    }

    private void updateRecordCategoryTree() {

        trRecord.updateUI();
    }

    private void updateRecordList() {
        if (selected != null) {
            records.clear();
            dlm.removeAllElements();
            records.addAll(bl.getReocrdsByCategory(selected));

            if (records.size() > 0) {
                jlRecord.setEnabled(true);
                for (Record r : records) {
                    dlm.addElement(r);
                }
            } else {
                jlRecord.setEnabled(false);
                dlm.addElement("---Keine Dokumente vorhanden---");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ppRecordCategories = new javax.swing.JPopupMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        ppRecords = new javax.swing.JPopupMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        tbPane = new javax.swing.JTabbedPane();
        spRecords = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        trRecord = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlRecord = new javax.swing.JList();

        jMenuItem4.setText("Neues Dokument anlegen");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddNewRecord(evt);
            }
        });
        ppRecordCategories.add(jMenuItem4);
        ppRecordCategories.add(jSeparator1);

        jMenuItem1.setText("Hinzufügen");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddRecordCategory(evt);
            }
        });
        ppRecordCategories.add(jMenuItem1);

        jMenuItem2.setText("Bearbeiten");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onEditRecordCategory(evt);
            }
        });
        ppRecordCategories.add(jMenuItem2);

        jMenuItem3.setText("Löschen");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDeleteRecordCategory(evt);
            }
        });
        ppRecordCategories.add(jMenuItem3);

        jMenuItem5.setText("Ansehen");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onViewReocrd(evt);
            }
        });
        ppRecords.add(jMenuItem5);

        jMenuItem6.setText("Bearbeiten");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onEditRecord(evt);
            }
        });
        ppRecords.add(jMenuItem6);

        jMenuItem7.setText("Löschen");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDeleteRecord(evt);
            }
        });
        ppRecords.add(jMenuItem7);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tbPane.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        trRecord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onTreeCallPopup(evt);
            }
        });
        trRecord.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                trRecordValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(trRecord);

        spRecords.setLeftComponent(jScrollPane1);

        jlRecord.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jlRecord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onRecordListCallPopup(evt);
            }
        });
        jScrollPane2.setViewportView(jlRecord);

        spRecords.setRightComponent(jScrollPane2);

        tbPane.addTab("Dokumente", spRecords);

        getContentPane().add(tbPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trRecordValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_trRecordValueChanged
        TreePath tp = evt.getNewLeadSelectionPath();
        if (tp != null) {
            Category cat = (Category) tp.getLastPathComponent();
            selected = cat;
            updateRecordList();
        }
    }//GEN-LAST:event_trRecordValueChanged

    private void onAddRecordCategory(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddRecordCategory
        if (selected != null) {
            String name = JOptionPane.showInputDialog("Bitte den Namen eingeben: ");
            if (name != null) {
                if (name.length() > 0) {
                    Category cat = new Category(name, selected, selected.getLevel() + 1, CategoryType.DOCUMENT);
                    bl.addObj(cat);
                    selected.getSubCategories().add(cat);
                    updateRecordCategoryTree();
                    updateRecordList();
                }
            }
        }
    }//GEN-LAST:event_onAddRecordCategory

    private void onTreeCallPopup(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onTreeCallPopup
        if (evt.getButton() == 3) {
            if (selected != null) {
                ppRecordCategories.show(trRecord, evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_onTreeCallPopup

    private void onAddNewRecord(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddNewRecord
        AddEditDocumentDlg aedlg = new AddEditDocumentDlg(null, true, false, null, false);
        aedlg.setVisible(true);
        if (aedlg.isOk()) {
            Record rec = aedlg.getRecord();
            //add documentpages
            rec.setCategory(selected);
            bl.addObj(rec);
            for (DocumentPage dp : rec.getDocumentPages()) {
                dp.setDocument(rec);
                bl.addObj(dp);
            }

            updateRecordList();
        }
    }//GEN-LAST:event_onAddNewRecord

    private void onEditRecordCategory(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onEditRecordCategory
        if (selected != null) {
            String newName = JOptionPane.showInputDialog("Bitte eine neue Bezeichnung eingeben: ", selected.getName());
            if (newName.length() > 0) {
                if (!bl.doesSubCategoryExist(selected, newName)) {
                    selected.setName(newName);
                    bl.updateObj(selected);
                    updateRecordCategoryTree();
                } else {
                    JOptionPane.showMessageDialog(this, "Eine Sub-Kategorie mit dieser Bezeichnung exisitiert bereits!", "Fehler", JOptionPane.ERROR_MESSAGE);
                }

            }
        }
    }//GEN-LAST:event_onEditRecordCategory

    private void onDeleteRecordCategory(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDeleteRecordCategory
        if (selected != null) {

            if (!bl.isRecordCategoryInUse(selected)) {
                selected.getPriorCategory().getSubCategories().remove(selected);
                bl.removeObj(selected);
                updateRecordCategoryTree();
            } else {
                JOptionPane.showMessageDialog(null, "Diese Kategorie kann nicht gelöscht werden, \n"
                        + " da damit (oder mit einer der Unterkategorien) ein Dokumt verknüpft ist!", "Fehler!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_onDeleteRecordCategory

    private void onViewReocrd(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onViewReocrd
        Record selectedRecord = (Record) jlRecord.getSelectedValue();
        if (selectedRecord != null) {
            AddEditDocumentDlg aedlg = new AddEditDocumentDlg(null, true, true, selectedRecord, false);
            aedlg.setVisible(true);
        }
    }//GEN-LAST:event_onViewReocrd

    private void onRecordListCallPopup(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onRecordListCallPopup
        if (evt.getButton() == 3) {
            Record selectedRecord = (Record) jlRecord.getSelectedValue();
            if (selectedRecord != null) {
                ppRecords.show(jlRecord, evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_onRecordListCallPopup

    private void onDeleteRecord(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDeleteRecord
        Record selectedRecord = (Record) jlRecord.getSelectedValue();
        if (selectedRecord != null) {
            //first delete all documentpages
            for (DocumentPage dp : selectedRecord.getDocumentPages()) {
                bl.removeObj(dp);
            }
            bl.removeObj(selectedRecord);
            updateRecordList();
        }
    }//GEN-LAST:event_onDeleteRecord

    private void onEditRecord(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onEditRecord
        Record selectedRecord = (Record) jlRecord.getSelectedValue();
        if (selectedRecord != null) {
            AddEditDocumentDlg aedlg = new AddEditDocumentDlg(null, true, false, selectedRecord, false);
            aedlg.setVisible(true);
            if (aedlg.isOk()) {
                Record newRecord = aedlg.getRecord();
                //delete olt documentPages
                for (DocumentPage dp : selectedRecord.getDocumentPages()) {
                    bl.removeObj(dp);
                }
                selectedRecord.getDocumentPages().clear();
                //add new documentpages
                for (DocumentPage dp : newRecord.getDocumentPages()) {
                    dp.setDocument(selectedRecord);
                    bl.addObj(dp);
                    selectedRecord.getDocumentPages().add(dp);
                }
                
                selectedRecord.setTitle(newRecord.getTitle());
                selectedRecord.setDescription(newRecord.getDescription());
                
                bl.updateObj(selectedRecord);
                updateRecordList();
            }
        }
    }//GEN-LAST:event_onEditRecord

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageDocumentsDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageDocumentsDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageDocumentsDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageDocumentsDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ManageDocumentsDlg dialog = new ManageDocumentsDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JList jlRecord;
    private javax.swing.JPopupMenu ppRecordCategories;
    private javax.swing.JPopupMenu ppRecords;
    private javax.swing.JSplitPane spRecords;
    private javax.swing.JTabbedPane tbPane;
    private javax.swing.JTree trRecord;
    // End of variables declaration//GEN-END:variables
}
