/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.check;

import beans.Account;
import beans.Article;
import beans.CashFlow;
import beans.DocumentPage;
import beans.Payment;
import beans.PaymentPosition;
import beans.Transfer;
import bl.AusgabenBl;
import gui.document.AddEditDocumentDlg;
import gui.main.CashFlowCellRenderer;
import gui.main.CashFlowTableModel;
import gui.payment.AddEditPaymentDlg;
import gui.transfer.AddEditTransferDlg;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;

/**
 *
 * @author Bernhard
 */
public class CheckDlg extends javax.swing.JDialog {

    /**
     * Creates new form CheckDlg
     */
    private BigDecimal sollValue;
    private Account account;
    private NumberFormat formatter = NumberFormat.getCurrencyInstance();
    private AusgabenBl bl = AusgabenBl.getInstance();
    private ArrayList<CashFlow> cashFlow = new ArrayList<>();
    private CashFlowTableModel cftm = new CashFlowTableModel(cashFlow);

    public CheckDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        CheckStartupDlg csdlg = new CheckStartupDlg(parent, true);
        csdlg.setVisible(true);
        if (csdlg.isOk()) {
            sollValue = csdlg.getValue();
            account = csdlg.getSelectedAccount();
            lbSoll.setText(formatter.format(sollValue));
            cashFlow.addAll(bl.getUncheckedCashFlow(account));
            tbCashFlow.setModel(cftm);
            tbCashFlow.updateUI();

            for (int x = 0; x < tbCashFlow.getColumnCount(); ++x) {
                TableColumn col = tbCashFlow.getColumnModel().getColumn(x);
                col.setCellRenderer(new CashFlowCellRenderer());
            }

            updateDifference();
        } else {
            setVisible(false);
            dispose();
        }
    }

    private void updateDifference() {
        BigDecimal isValue = bl.getAccountBalance(account);
        BigDecimal difference = sollValue.subtract(isValue);

        lbIs.setText(formatter.format(isValue));
        lbDifference.setText(formatter.format(difference));
    }

    private void updateTable() {
        cashFlow.clear();
        cashFlow.addAll(bl.getUncheckedCashFlow(account));
        tbCashFlow.updateUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miIC = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lbSoll = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbIs = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbDifference = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbCashFlow = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        jMenuItem1.setText("Als gecheckt markieren");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCheck(evt);
            }
        });
        popup.add(jMenuItem1);
        popup.add(jSeparator1);

        miIC.setText("Rechnungskopie anzeigen");
        miIC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miIConShowInvvoiceCopy(evt);
            }
        });
        popup.add(miIC);

        jMenuItem2.setText("Bearbeiten");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2onEdit(evt);
            }
        });
        popup.add(jMenuItem2);

        jMenuItem3.setText("Löschen");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3onDelete(evt);
            }
        });
        popup.add(jMenuItem3);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridLayout(3, 2));

        jLabel1.setText("Soll-Betrag:");
        jPanel1.add(jLabel1);
        jPanel1.add(lbSoll);

        jLabel3.setText("Ist-Betrag:");
        jPanel1.add(jLabel3);
        jPanel1.add(lbIs);

        jLabel5.setText("Differenz:");
        jLabel5.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        jPanel1.add(jLabel5);

        lbDifference.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        jPanel1.add(lbDifference);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        tbCashFlow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbCashFlow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbCashFlow);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Hinzufügen");

        jMenuItem4.setText("Zahlung");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddPayment(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Umbuchung");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddTransfer(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onCheck(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCheck
        int[] rows = tbCashFlow.getSelectedRows();

        for (int i = rows.length - 1; i >= 0; i--) {
            int row = i;
            if (row >= 0) {
                CashFlow sel = cashFlow.get(row);
                sel.setChecked(true);
                bl.updateObj(sel);

                cashFlow.remove(row);
                tbCashFlow.updateUI();
            }
        }
    }//GEN-LAST:event_onCheck

    private void miIConShowInvvoiceCopy(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miIConShowInvvoiceCopy
        int row = tbCashFlow.getSelectedRow();
        if (row >= 0) {
            CashFlow sel = cashFlow.get(row);
            if (sel instanceof Payment) {
                Payment payment = (Payment) sel;
                AddEditDocumentDlg icdlg = new AddEditDocumentDlg(null, true, true, payment.getInvoiceCopy(), true);
                icdlg.setVisible(true);
            }
        }
    }//GEN-LAST:event_miIConShowInvvoiceCopy

    private void jMenuItem2onEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2onEdit
        int row = tbCashFlow.getSelectedRow();
        if (row >= 0) {
            CashFlow sel = cashFlow.get(row);
            if (sel instanceof Payment) {
                Payment payment = (Payment) sel;
                AddEditPaymentDlg aepdlg = new AddEditPaymentDlg(null, true, payment, false);
                aepdlg.setVisible(true);
                if (aepdlg.isOk()) {
                    //delete old paymentpositions and create new ones
                    payment = aepdlg.getPayment();
                    bl.deleteAllPaymentPositions(payment);
                    System.out.println(payment.getPaymentPositions());
                    for (PaymentPosition pp : payment.getPaymentPositions()) {
                        String articleName = pp.getArticle().getName();
                        BigDecimal price = pp.getArticle().getPrice();
                        Article article = bl.getArticle(articleName, price);
                        pp.setArticle(article);
                        if (pp.getPayment() == null) {
                            pp.setPayment(payment);
                        }
                        bl.addObj(pp);
                    }

                    //delete old invoicecopy and create new one
                    if (payment.getInvoiceCopy() != null) {
                        if (!payment.getInvoiceCopy().getDocumentPages().isEmpty()) {
                            bl.deleteDocumentPages(payment.getInvoiceCopy());
                            if (payment.getInvoiceCopy().getDocumentID() == 0) {
                                bl.addObj(payment.getInvoiceCopy());
                            }
                            for (DocumentPage dp : payment.getInvoiceCopy().getDocumentPages()) {
                                dp.setDocument(payment.getInvoiceCopy());
                                bl.addObj(dp);
                            }

                        } else {
                            //delete ic
                            bl.removeObj(payment.getInvoiceCopy());
                            payment.setInvoiceCopy(null);
                        }
                    }
                    bl.updateObj(payment);

                }

            } else if (sel instanceof Transfer) {
                Transfer transfer = (Transfer) sel;
                AddEditTransferDlg aetdlg = new AddEditTransferDlg(null, true, transfer);
                aetdlg.setVisible(true);
                if (aetdlg.isOk()) {
                    bl.updateObj(transfer);

                }
            }
        }
        updateTable();
        updateDifference();
    }//GEN-LAST:event_jMenuItem2onEdit

    private void jMenuItem3onDelete(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3onDelete
        int row = tbCashFlow.getSelectedRow();
        if (row >= 0) {
            int sel = JOptionPane.showConfirmDialog(this, "Wirklich löschen?");

            if (sel == 0) {
                //really delete
                CashFlow selected = cashFlow.get(row);
                if (selected instanceof Transfer) {
                    bl.removeObj(selected);

                } else if (selected instanceof Payment) {
                    Payment payment = (Payment) selected;
                    //delete invoicecopy
                    if (payment.getInvoiceCopy() != null) {
                        //delete pages
                        for (DocumentPage dp : payment.getInvoiceCopy().getDocumentPages()) {
                            bl.removeObj(dp);
                        }

                    }
                    //delete paymentpostions
                    for (PaymentPosition pp : payment.getPaymentPositions()) {
                        bl.removeObj(pp);
                    }
                    //delete payment itself
                    bl.removeObj(payment);
                    if (payment.getInvoiceCopy() != null) {
                        bl.removeObj(payment.getInvoiceCopy());
                    }
                }

                cashFlow.remove(row);
                updateTable();
                updateDifference();
            }
        }
    }//GEN-LAST:event_jMenuItem3onDelete

    private void onTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onTableMouseClicked
        if (evt.getButton() == 3) {
            int row = tbCashFlow.getSelectedRow();
            if (row >= 0) {
                CashFlow selected = cashFlow.get(row);
                popup.show(tbCashFlow, evt.getX(), evt.getY());
                if (selected instanceof Payment) {
                    Payment p = (Payment) selected;
                    miIC.setEnabled((p.getInvoiceCopy() != null));
                } else {
                    miIC.setEnabled(false);
                }

            }
        }
    }//GEN-LAST:event_onTableMouseClicked

    private void onAddPayment(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddPayment
        AddEditPaymentDlg aepdlg = new AddEditPaymentDlg(null, true, null, false);
        aepdlg.setVisible(true);
        if (aepdlg.isOk()) {
            Payment payment = aepdlg.getPayment();
            if (payment.getInvoiceCopy() != null) {
                bl.addObj(payment.getInvoiceCopy());
                for (DocumentPage dp : payment.getInvoiceCopy().getDocumentPages()) {
                    dp.setDocument(payment.getInvoiceCopy());
                    bl.addObj(dp);
                }

            }

            bl.addObj(payment);

            for (PaymentPosition pp : payment.getPaymentPositions()) {
                pp.setPayment(payment);
                bl.addObj(pp.getArticle());
                bl.addObj(pp);
            }

            if (payment.getInvoiceCopy() != null) {
//                    JOptionPane.showMessageDialog(this, "ID der Zahlung: " + payment.getId());
            }
            JOptionPane.showMessageDialog(this, "ID der eingefügten Zahlung: " + payment.getId());

        }
        updateTable();
        updateDifference();
    }//GEN-LAST:event_onAddPayment

    private void onAddTransfer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddTransfer
        AddEditTransferDlg aetdlg = new AddEditTransferDlg(null, true, null);
        aetdlg.setVisible(true);
        if (aetdlg.isOk()) {
            Transfer t = aetdlg.getTransfer();
            bl.addObj(t);

            updateDifference();
            updateTable();
        }
    }//GEN-LAST:event_onAddTransfer

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CheckDlg dialog = new CheckDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lbDifference;
    private javax.swing.JLabel lbIs;
    private javax.swing.JLabel lbSoll;
    private javax.swing.JMenuItem miIC;
    private javax.swing.JPopupMenu popup;
    private javax.swing.JTable tbCashFlow;
    // End of variables declaration//GEN-END:variables

}
