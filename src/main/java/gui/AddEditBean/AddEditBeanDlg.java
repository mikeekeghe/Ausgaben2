/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.AddEditBean;

import annotations.GUIEditable;
import beans.Account;
import bl.AusgabenBl;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.jdesktop.swingx.JXDatePicker;

/**
 *
 * @author Bernhard1
 */
public class AddEditBeanDlg extends javax.swing.JDialog {

    /**
     * Creates new form AddEditBeanDlg
     */
    private Class objectClass;
    private Object obj;
    private boolean ok;
    private HashMap<String, JComponent> components = new HashMap<String, JComponent>();
    private AusgabenBl bl;

    public AddEditBeanDlg(java.awt.Frame parent, boolean modal, Object obj)  {
        super(parent, modal);
        try {
            initComponents();
            objectClass = obj.getClass();
            this.obj = obj;
            
            bl = AusgabenBl.getInstance();
            
            checkFields();
            
            setLocationRelativeTo(null);
            setupDialog();
//        pack();
//        repaint();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(parent, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(mainPanel);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkFields() throws Exception {
        //check if annotation is set
        boolean ok = false;
        for (Field field : objectClass.getDeclaredFields()) {
            GUIEditable anno = field.getAnnotation(GUIEditable.class);
            if (anno != null) {
                ok = true;
            }
        }

        if (!ok) {
            ok = true;
            throw new Exception("No field with GUIEditable annotation!");
        }
    }

    private void setupDialog() throws IllegalArgumentException, IllegalAccessException {
        ArrayList<JComponent> tempComponents = new ArrayList<>();
        //*2 becasue of label + component
        int height = 0;
        for (Field field : objectClass.getDeclaredFields()) {
            GUIEditable anno = field.getAnnotation(GUIEditable.class);
            if (anno != null) {
                field.setAccessible(true);
                JLabel label = new JLabel(anno.name());
                tempComponents.add(label);

                Object value = field.get(obj);

                if (field.getType() == Integer.class
                        || field.getType() == int.class
                        || field.getType() == Byte.class
                        || field.getType() == byte.class
                        || field.getType() == Double.class
                        || field.getType() == double.class
                        || field.getType() == float.class
                        || field.getType() == Short.class
                        || field.getType() == short.class
                        || field.getType() == Long.class
                        || field.getType() == long.class
                        || field.getType() == BigDecimal.class
                        || field.getType() == String.class) {
                    height += 30;
                    JTextField tf = null;
                    if (value != null && !value.toString().equals("0.0") && !value.toString().equals("0")) {
                        
                        tf = new JTextField(value.toString());
                    } else {
                        tf = new JTextField();
                    }
                    tf.setToolTipText(field.getName());
                    tempComponents.add(tf);
                    components.put(field.getName(), tf);
                } else if (field.getType() == java.sql.Date.class
                        || field.getType() == java.util.Date.class) {

                    height += 30;
                    long millisec = 0;
                    if (value != null) {

                        if (value.getClass() == java.sql.Date.class) {
                            java.sql.Date date = (java.sql.Date) value;
                            millisec = date.getTime();
                        } else {
                            java.util.Date date = (java.util.Date) value;
                            millisec = date.getTime();
                        }
                    }
                    JXDatePicker dp;
                    if (millisec != 0) {
                        dp = new JXDatePicker(new java.util.Date(millisec));
                    } else {
                        dp = new JXDatePicker();
                    }
                    dp.setToolTipText(field.getName());
                    tempComponents.add(dp);
                    components.put(field.getName(), dp);
                } else {
                    //other object
                    ArrayList<Object> objectList = bl.getAll(field.getType());
                    if (anno.showType() == GUIEditable.ShowType.COMBOBOX) {
                        height += 20;
                        JComboBox cb = new JComboBox(objectList.toArray());
                        tempComponents.add(cb);
                        components.put(field.getName(), cb);
                    } else if (anno.showType() == GUIEditable.ShowType.LIST) {
                        height += 60;
                        JList list = new JList(objectList.toArray());
                        tempComponents.add(list);
                        components.put(field.getName(), list);
                    }
                }
            }
        }
        GridBagLayout layout = new GridBagLayout();

        mainPanel.setLayout(layout);
        for (int i = 0; i < tempComponents.size(); i++) {
            JComponent c = tempComponents.get(i);
            GridBagConstraints constraints = new GridBagConstraints();
            if (i % 2 == 0) {
                //Label
                constraints.gridx = 0;
                constraints.gridy = i / 2;
                constraints.fill = GridBagConstraints.HORIZONTAL;
                constraints.gridwidth = 5;
                constraints.weightx = 1.0;
                mainPanel.add(c, constraints);
            } else {
                //other component
                constraints.gridx = 5;
                constraints.gridy = i / 2;
                constraints.fill = GridBagConstraints.HORIZONTAL;
                constraints.gridwidth = 17;
                constraints.weightx = 1.0;
                mainPanel.add(c, constraints);
            }
        }

        JButton okButton = new JButton("OK");
        okButton.addActionListener(new OKButtonActionListener());
        JButton cancelButton = new JButton("Cancel");

        GridBagConstraints constraints = new GridBagConstraints();
        constraints.gridx = 0;
        constraints.gridy = (components.size() / 2) + 3;
        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.gridwidth = 5;
        constraints.weightx = 1.0;
        mainPanel.add(okButton, constraints);

        constraints = new GridBagConstraints();
        constraints.gridx = 5;
        constraints.gridy = (components.size() / 2) + 3;
        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.gridwidth = 17;
        constraints.weightx = 1.0;
        mainPanel.add(cancelButton, constraints);

        if (height > 400) {
            height = 400;
        }

        this.setSize(600, height + 70); //+70 for buttons and other stuff
    }

    private void checkAndSetValues() throws Exception {
        for (String fieldName : components.keySet()) {
            JComponent component = components.get(fieldName);
            Field field = objectClass.getDeclaredField(fieldName);
            Method setter = objectClass.getDeclaredMethod("set" + fieldName.substring(0, 1).toUpperCase()
                            + fieldName.substring(1, fieldName.length()), field.getType());
            GUIEditable fieldAnnotation = field.getAnnotation(GUIEditable.class);
            if (field.getType() == Integer.class
                    || field.getType() == int.class
                    || field.getType() == Byte.class
                    || field.getType() == byte.class
                    || field.getType() == Double.class
                    || field.getType() == double.class
                    || field.getType() == Float.class
                    || field.getType() == float.class
                    || field.getType() == Short.class
                    || field.getType() == short.class
                    || field.getType() == Long.class
                    || field.getType() == long.class
                    || field.getType() == BigDecimal.class) {
                JTextField tf = (JTextField) component;
                    String text = tf.getText();
                if(!fieldAnnotation.optional() || (fieldAnnotation.optional() && text.length() > 0)){
                    
                    if(text.length() > 0){
                        if(field.getType() == int.class || field.getType() == Integer.class){
                            try{
                            int val = Integer.parseInt(text);
                            setter.invoke(obj, val);
                            }catch(NumberFormatException ex){
                               throw new Exception("Wert für Feld  " + fieldAnnotation.name() + " kann nicht in Zahl umgewandelt werden");  
                            }
                        } else if(field.getType() == short.class || field.getType() == Short.class){
                            try{
                            short val = Short.parseShort(text);
                            setter.invoke(obj, val);
                            }catch(NumberFormatException ex){
                               throw new Exception("Wert für Feld  " + fieldAnnotation.name() + " kann nicht in Zahl umgewandelt werden");  
                            }
                        }else if(field.getType() == long.class || field.getType() == Long.class){
                            try{
                            long val = Long.parseLong(text);
                            setter.invoke(obj, val);
                            }catch(NumberFormatException ex){
                               throw new Exception("Wert für Feld  " + fieldAnnotation.name() + " kann nicht in Zahl umgewandelt werden");  
                            }
                        }else if(field.getType() == byte.class || field.getType() == Byte.class){
                            try{
                            long val = Byte.parseByte(text);
                            setter.invoke(obj, val);
                            }catch(NumberFormatException ex){
                               throw new Exception("Wert für Feld  " + fieldAnnotation.name() + " kann nicht in Zahl umgewandelt werden");  
                            }
                        }else if(field.getType() == float.class || field.getType() == Float.class){
                            try{
                             text = text.replaceAll(",", ".");
                            float val = Float.parseFloat(text);
                            setter.invoke(obj, val);
                            }catch(NumberFormatException ex){
                               throw new Exception("Wert für Feld  " + fieldAnnotation.name() + " kann nicht in Zahl umgewandelt werden");  
                            }
                        }else if(field.getType() == Double.class || field.getType() == double.class){
                            try{
                            text = text.replaceAll(",", ".");
                            double val = Double.parseDouble(text);
                            setter.invoke(obj, val);
                            }catch(NumberFormatException ex){
                               throw new Exception("Wert für Feld  " + fieldAnnotation.name() + " kann nicht in Zahl umgewandelt werden");  
                            }
                        }else if(field.getType() == BigDecimal.class ){
                            try{
                            text = text.replaceAll(",", ".");
                            BigDecimal val = new BigDecimal(text);
                            setter.invoke(obj, val);
                            }catch(NumberFormatException ex){
                               throw new Exception("Wert für Feld  " + fieldAnnotation.name() + " kann nicht in Zahl umgewandelt werden");  
                            }
                        }
                    }else{
                       throw new Exception("Parameter " + fieldAnnotation.name() + " has no value"); 
                    }
                }

            } else if (field.getType() == java.sql.Date.class
                    || field.getType() == java.util.Date.class) {
                    JXDatePicker dp = (JXDatePicker) component;
                    if(dp.getDate() != null ){
                        long time = dp.getDate().getTime();
                        if(field.getType() == java.sql.Date.class){
                            java.sql.Date date = new java.sql.Date(time);
                            setter.invoke(obj, date);
                        }else{
                            java.util.Date date = new java.util.Date(time);
                            setter.invoke(obj, date);
                        }
                    }else if(fieldAnnotation.optional()){
                        //just do nothing
                    }else{
                        throw new Exception("Parameter " + fieldAnnotation.name() + " has no value");
                    }
            } else if (field.getType() == String.class) {
                JTextField tf = (JTextField) component;
                String text = tf.getText();
                if (text.length() > 0 || fieldAnnotation.optional()) {
                    setter.invoke(obj, text);
                } else{
                        throw new Exception("Parameter " + fieldAnnotation.name() + " has no value");
                    }
            }else {
                    Object fieldValue = null;
                    if(fieldAnnotation.showType() == GUIEditable.ShowType.COMBOBOX){
                        JComboBox cb = (JComboBox) component;
                        fieldValue = cb.getSelectedItem();
                    }else if(fieldAnnotation.showType() == GUIEditable.ShowType.LIST){
                        JList list = (JList) component;
                        fieldValue = list.getSelectedValue();
                    }
                    
                    if(fieldValue != null || fieldAnnotation.optional()){
                        setter.invoke(obj, fieldValue);
                    }else{
                        throw new Exception("Parameter " + fieldAnnotation.name() + " has no value");
                    }
                }
        }
    }

    class OKButtonActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                ok = true;
                checkAndSetValues();
                setVisible(false);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    class CancelButtonActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            ok = false;
            setVisible(false);
        }

    }

    public boolean isOk() {
        return ok;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddEditBeanDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddEditBeanDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddEditBeanDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddEditBeanDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    AddEditBeanDlg dialog = new AddEditBeanDlg(new javax.swing.JFrame(), true, new Account("Test"));
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(AddEditBeanDlg.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
}
